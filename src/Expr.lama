-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of 
    Assn (x, e) ->
      case evalList(c, {x, e}) of 
          [[s, w], {Ref (x), e}] -> [[s <- [x, e], w], e]
        | [c@[s, w], {ElemRef (arr, n), e}] -> [c, arr[n] := e]
      esac
  | Set (name, expr) ->
      case eval (c, expr) of
        [[s, w], value] -> [[s <- [name, value], w], value]
      esac
  | Seq (h, t) ->
    case evalList (c, {h, t}) of
      [c, {h, t}] -> [c, t]
    esac
  | Skip -> [c, None]
  | If (expr, thenStmt, elseStmt) ->
    case eval (c, expr) of [c, value] ->
      if value
      then eval (c, thenStmt)
      else eval (c, elseStmt)
      fi
    esac
  | While (expr, stmt) ->
    case eval (c, expr) of [c, value] ->
      if value
      then eval (c, Seq (stmt, While (expr, stmt)))
      else [c, None]
      fi
    esac
  | DoWhile (stmt, expr) -> eval (c, Seq (stmt, While (expr, stmt)))
  | Var (name) -> [c, lookup (s, name)]
  | Ref (expr) -> [c, Ref (expr)]
  | Const (n) -> [c, n]
  | Binop (op, l, r) ->
    case evalList (c, {l, r}) of
      [c, {l, r}] -> [c, evalOp (op, l, r)]
    esac
  | Scope (defs, expr) ->
    case foldl (fun (s, def) {
      case def of
        Var (names) -> addNames (s, names)
      | Fun (name, args, body) -> addFunction (s, name, args, body)
      esac
    }, s.enterScope, defs) of
      s -> case eval ([s, w], expr) of
        [[s, w], value] -> [[s.leaveScope, w], value]
      esac 
    esac
  | Call (name, exprs) ->
    case lookup (s, name) of
      Fun (args, External) -> case evalList (c, exprs) of 
        [[s, w], values] -> case evalBuiltin (name, values, w) of
          [value, w] -> [[s, w], value]
        esac
      esac
    | Fun (args, body) -> 
      case evalList (c, exprs) of 
        [[s, w], values] -> case foldl (fun (s, [arg, value]) {
          s.addName (arg, value) 
        }, enterFunction (s), zip (args, values)) of
          funS -> case eval ([funS, w], body) of 
            [[funS, w], value] -> [[leaveFunction (s, getGlobal (funS)), w], value]
          esac
        esac
      esac
    esac
  | Ignore (expr) ->
    case eval (c, expr) of
      [c, _] -> [c, None]
    esac
  | String (s) -> [c, s]
  | Array (expr) ->  case evalList (c, expr) of [c, values] -> [c, listArray (values)] esac
  | Sexp (s, expr) -> case evalList (c, expr) of [c, values] -> [c, Sexp (s, listArray (values))] esac
  | Elem (arr, expr) ->
    case evalList (c, {arr, expr}) of
      [c, {arr, n}] -> case arr of
          Sexp (_, arr) -> [c, arr[n]]
        | _ -> [c, arr[n]] 
        esac
    esac
  | ElemRef (arr, expr) ->
    case evalList(c, {arr, expr}) of
      [c, {arr, n}] -> case arr of
          Sexp (_, arr) -> [c, ElemRef (arr, n)]
        | _ -> [c, ElemRef (arr, n)] 
      esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
