-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, world], insns) { 
    case insns of 
      { } -> c
    | head : tail -> 
      case head of 
        READ -> case readWorld (world) of [value, world] -> eval ([value : stack, cst, state, world], tail) esac
      | WRITE -> case stack of value : stack -> eval([stack, cst, state, writeWorld (value, world)], tail) esac
      | BINOP (op) -> case stack of r : l : stack -> eval([evalOp(op, l, r) : stack, cst, state, world], tail) esac
      | LD (name) -> eval ([lookup(state, name) : stack, cst, state, world], tail)
      | LDA (name) -> eval ([name : stack, cst, state, world], tail)
      | ST (name) -> case stack of value : stack -> state.assign (name, value); eval (c, tail) esac
      | STI -> case stack of value : name : stack -> state.assign (name, value); eval ([value : stack, cst, state, world], tail) esac
      | CONST (n) -> eval ([n : stack, cst, state, world], tail)
      | LABEL (_) -> eval(c, tail)
      | JMP (lab) -> eval(c, env.fromLabel (lab))
      | CJMP("nz", lab) -> case stack of value : stack -> eval ([stack, cst, state, world], if value != 0 then env.fromLabel (lab) else tail fi) esac
      | CJMP("z", lab) -> case stack of value : stack -> eval ([stack, cst, state, world], if value == 0 then env.fromLabel (lab) else tail fi) esac
      | CALL (name, _) -> eval([stack, [state, tail] : cst, state, world], fromLabel (env, name))
      | BEGIN (name, a, l) -> 
        case take (stack, a) of
          [stack, args] -> 
            case foldl (fun ([state, n], arg) {
              state.assign(Arg (n), arg); [state, n + 1]
            }, [makeState(a, l), 0], args) of 
              [state, _] -> eval([stack, cst, state, world], tail)
            esac
        esac
      | GLOBAL (name) -> state.assign(Glb (name), 0); eval(c, tail)
      | END -> 
        case cst of 
          {} -> c
        | [state, tail] : cst -> eval([stack, cst, state, world], tail)
        esac
      | DROP -> eval([tl (stack), cst, state, world], tail)
      esac
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Assn (x, e) ->
        case env.genLabels (2) of
          [xLab, eLab, env] ->
            case compile (xLab, env, x) of
              [xLabUsed, env, xCode] ->
                case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] ->
                    [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s1Lab, env] ->
            case compile (s1Lab, env, s1) of
              [s1LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s1Lab, s1LabUsed) <+> s2Code]
                esac
            esac
        esac
    | Skip -> [false, env, emptyBuffer ()]
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write (e) ->
      case env.genLabel of 
        [eLab, env] -> 
          case compile (eLab, env, e) of
            [eLabUsed, env, eCode] -> 
              [false, env, eCode <+> label (eLab, eLabUsed) <+ WRITE]
          esac
      esac
    | If (c, t, e) ->
      case env.genLabels (2) of
        [cLab, eLab, env] ->
          case compile (cLab, env, c) of
            [cLabUsed, env, cCode] ->
              case compile (lab, env, t) of
                [_, env, tCode] ->
                  case compile (lab, env, e) of
                    [_, env, eCode] ->
                      [true, env, cCode <+> label (cLab, cLabUsed) <+ CJMP ("z", eLab) <+> tCode <+ JMP (lab) <+> label (eLab, true) <+> eCode]
                  esac
              esac
          esac
      esac
    | While (c, b) ->
      case env.genLabels (2) of
        [cLab, bLab , env] ->
          case compile (bLab, env, c) of
            [bLabUsed, env, cCode] ->
              case compile (cLab, env, b) of
                [_, env, bCode] ->
                  [true, env, label (cLab, true) <+> cCode <+ CJMP ("z", lab) <+> label (bLab, bLabUsed) <+> bCode <+ JMP (cLab)]
              esac
          esac
      esac
    | DoWhile (b, c) ->
      case genLabels(env, 2) of
        [bLab, cLab, env] ->
          case compile(bLab, env, c) of
            [cLabUsed, env, cCode] ->
              case compile(cLab, env, b) of
                [_, env, bCode] ->
                  [false, env, label (bLab, true) <+> bCode <+> label (cLab, cLabUsed) <+> cCode <+ CJMP ("nz", bLab)]
              esac
          esac
      esac
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Binop (op, l, r) -> 
      case env.genLabels (2) of
        [lLab, rLab, env] ->
          case compile (lLab, env, l) of
            [lLabUsed, env, lCode] ->
              case compile (rLab, env, r) of
                [rLabUsed, env, rCode] ->
                  [false, env, lCode <+> label (lLab, lLabUsed) <+> rCode <+> label (rLab, rLabUsed) <+ BINOP (op)]
              esac          
          esac
      esac
    | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> 
      case env.genLabel of
        [eLab, env] ->
          case compile (eLab, env, e) of
            [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
          esac
      esac
    | Scope (defs, expr) -> 
        case foldl (fun ([code, env], def) {
          case def of
            Var (names) -> [if env.isGlobal then foldl (fun (code, name) { code <+ GLOBAL (name) }, code, names) else code fi, addVars (env, names)]
          | _ -> [code, env]
          esac
        }, [emptyBuffer (), env.beginScope], defs) of [gCode, env] ->
          case foldl (fun ([env, funs], def) {
            case def of
              Fun (name, args, body) -> case genFunLabel (env, name) of [lab, env] -> [addFun (env, name, lab, args.size), [lab, args, body] : funs]esac
              | _ -> [env, funs]
            esac
          }, [env, {}], defs) of
            [env, funs] -> case foldl (fun (env, [lab, args, body]) {
              rememberFun (env, lab, args, body)
            }, env, funs) of env ->
              case compile (lab, env, expr) of 
                [used, env, eCode] -> [used, env.endScope, gCode <+> eCode]
              esac
            esac
          esac
        esac
    | Call (name, exprs) -> 
        case foldl(fun ([env, code], a) {
          case env.genLabel of 
            [aLab, env] ->
              case compile (aLab, env, a) of
                [aLabUsed, env, aCode] -> [env, code <+> aCode <+> label (aLab, aLabUsed)]
              esac
          esac
        }, [env, emptyBuffer ()], exprs) of
          [env, code] -> case lookupFun (env, name) of 
            Fun (name, a) -> [false, env, code <+ CALL (name, a)]
          esac 
        esac
    esac
  }

  fun compileFun(env, Fun (name, args, b, state)) {
    case genLabel (addArgs (beginFun (env, state), args)) of 
      [bLab, env] -> 
        case compile (bLab, env, b) of 
          [bLabUsed, env, bCode] -> [env, singletonBuffer (LABEL (name)) <+ BEGIN (name, size(args), getLocals(env)) <+> bCode <+> label (bLab, bLabUsed) <+ END]
        esac
    esac 
  }

  fun compileFuns(env) {
    case getFuns(env) of 
      [{}, env] -> emptyBuffer ()
    | [funcs, env] ->
        case foldl (fun([env, code], f) { 
          case compileFun(env, f) of 
            [env, fCode] -> [env, code <+> fCode]
          esac
        }, [env, emptyBuffer()], funcs) of 
          [env, code] -> code
        esac 
    esac
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns(env)
       esac
  esac
}

