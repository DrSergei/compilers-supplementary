-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, state, world], insns) {
  case insns of
    {} -> [stack, state, world]
    | head : tail ->
      case head of
        READ -> case readWorld (world) of [value, world] -> eval (env, [value : stack, state, world], tail) esac
      | WRITE -> case stack of value : stack -> eval(env, [stack, state, writeWorld (value, world)], tail) esac
      | BINOP (op) -> case stack of r : l : stack ->
          var res = case op of
            "+" -> l + r
            | "-" -> l - r
            | "*" -> l * r
            | "/" -> l / r
            | "%" -> l % r
            | "<" -> l < r
            | ">" -> l > r
            | "<=" -> l <= r
            | ">=" -> l >= r
            | "==" -> l == r
            | "!=" -> l != r
            | "&&" -> l && r
            | "!!" -> l !! r
          esac;
          eval(env, [res : stack, state, world], tail)
        esac
      | LD (name) -> eval (env, [state (name) : stack, state, world], tail)
      | LDA (name) -> eval (env, [name : stack, state, world], tail)
      | ST (name) -> case stack of value : stack -> eval (env, [value : stack, state <- [name, value], world], tail) esac
      | STI -> case stack of value : name : stack -> eval (env, [value : stack, state <- [name, value], world], tail) esac
      | CONST (n) -> eval (env, [n : stack, state, world], tail)
      | LABEL (_) -> eval (env, [stack, state, world], tail)
      | JMP (lab) -> eval (env, [stack, state, world], env.fromLabel (lab))
      | CJMP ("nz", lab) -> case stack of value : stack -> eval (env, [stack, state, world], if value != 0 then env.fromLabel (lab) else tail fi) esac
      | CJMP ("z", lab) -> case stack of value : stack -> eval (env, [stack, state, world], if value == 0 then env.fromLabel (lab) else tail fi) esac
      | DROP -> eval (env, [tl (stack), state, world], tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Assn (x, e) ->
        case env.genLabels (2) of
          [xLab, eLab, env] ->
            case compile (xLab, env, x) of
              [xLabUsed, env, xCode] ->
                case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] ->
                    [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s1Lab, env] ->
            case compile (s1Lab, env, s1) of
              [s1LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s1Lab, s1LabUsed) <+> s2Code]
                esac
            esac
        esac
    | Skip -> [false, env, emptyBuffer ()]
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->
      case env.genLabel of 
        [eLab, env] -> 
          case compile (eLab, env, e) of
            [eLabUsed, env, eCode] -> 
              [false, env, eCode <+> label (eLab, eLabUsed) <+ WRITE]
          esac
      esac
    | If (c, t, e) ->
      case env.genLabels (2) of
        [cLab, eLab, env] ->
          case compile (cLab, env, c) of
            [cLabUsed, env, cCode] ->
              case compile (lab, env, t) of
                [_, env, tCode] ->
                  case compile (lab, env, e) of
                    [_, env, eCode] ->
                      [true, env, cCode <+> label (cLab, cLabUsed) <+ CJMP ("z", eLab) <+> tCode <+> singletonBuffer (JMP (lab)) <+> label (eLab, true) <+> eCode]
                  esac
              esac
          esac
      esac
    | While (c, b) ->
      case env.genLabels (2) of
        [cLab, bLab , env] ->
          case compile (bLab, env, c) of
            [bLabUsed, env, cCode] ->
              case compile (cLab, env, b) of
                [_, env, bCode] ->
                  [true, env, label (cLab, true) <+> cCode <+ CJMP ("z", lab) <+> label (bLab, bLabUsed) <+> bCode <+ JMP (cLab)]
              esac
          esac
      esac
    | DoWhile (b, c) ->
      case genLabels(env, 2) of
        [bLab, cLab, env] ->
          case compile(bLab, env, c) of
            [cLabUsed, env, cCode] ->
              case compile(cLab, env, b) of
                [_, env, bCode] ->
                  [false, env, label (bLab, true) <+> bCode <+> label (cLab, cLabUsed) <+> cCode <+ CJMP ("nz", bLab)]
              esac
          esac
      esac
    | Var (x) -> [false, env, singletonBuffer (LD (x))]
    | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
    | Binop (op, l, r) -> 
      case env.genLabels (2) of
        [lLab, rLab, env] ->
          case compile (lLab, env, l) of
            [lLabUsed, env, lCode] ->
              case compile (rLab, env, r) of
                [rLabUsed, env, rCode] ->
                  [false, env, lCode <+> label (lLab, lLabUsed) <+> rCode <+> label (rLab, rLabUsed) <+ BINOP (op)]
              esac          
          esac
      esac
    | Const (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> 
      case env.genLabel of
        [eLab, env] ->
          case compile (eLab, env, e) of
            [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
